{"version":3,"file":"static/js/344.9fc15fbf.chunk.js","mappings":"8SAEMA,EAAW,gCACXC,EAAU,mCAEHC,EAAY,mCAAG,WAAOC,GAAP,4FAAcC,EAAd,+BAAqB,EAArB,SACHC,EAAAA,EAAAA,IAAA,UAClBL,EADkB,gCACcC,EADd,kBAC+BE,EAD/B,iBAC6CC,IAF1C,cACpBE,EADoB,yBAInBA,EAASC,MAJU,2CAAH,sDAOZC,EAAmB,mCAAG,oGACVH,EAAAA,EAAAA,IAAA,UAClBL,EADkB,sCACoBC,IAFV,cAC3BK,EAD2B,yBAI1BA,EAASC,MAJiB,2CAAH,qDAOnBE,EAAS,mCAAG,WAAMC,GAAN,uFACAL,EAAAA,EAAAA,IAAA,UAClBL,EADkB,iBACDU,EADC,4BAC0BT,IAF1B,cACjBK,EADiB,yBAIhBA,EAASC,MAJO,2CAAH,sDAOTI,EAAY,mCAAG,WAAMD,GAAN,uFACHL,EAAAA,EAAAA,IAAA,UAClBL,EADkB,iBACDU,EADC,4BAC0BT,IAFvB,cACpBK,EADoB,yBAInBA,EAASC,MAJU,2CAAH,sDAOZK,EAAe,mCAAG,WAAMC,GAAN,uFACNR,EAAAA,EAAAA,IAAA,UAAaL,EAAb,iBAA8Ba,EAA9B,oBAA4CZ,IADtC,cACvBK,EADuB,yBAEtBA,EAASC,MAFa,2CAAH,qD,+FChC5B,GAAiB,E,kBCIJO,EAAO,WAClB,OAA4BC,EAAAA,EAAAA,UAAS,IAArC,eAAOC,EAAP,KAAeC,EAAf,KAMA,OALAC,EAAAA,EAAAA,YAAU,YACRV,EAAAA,EAAAA,MAAsBW,MAAK,SAAAb,GACzBW,EAAUX,EAASc,QACpB,GACF,GAAE,KAED,4BACE,eAAIC,UAAWC,EAAAA,MAAf,6BACA,SAAC,IAAD,CAAkBN,OAAQA,MAG/B,C,oGCVYO,EAAmB,SAAC,GAAgB,IAAdP,EAAa,EAAbA,OAC3BQ,GAAWC,EAAAA,EAAAA,MACjB,OACE,gBAAKJ,UAAWC,EAAAA,EAAAA,UAAhB,UACE,eAAID,UAAWC,EAAAA,EAAAA,iBAAf,SACGN,EAAOU,KAAI,SAAAC,GAAK,OACf,eAAoBN,UAAWC,EAAAA,EAAAA,iBAA/B,UACE,UAAC,KAAD,CAAMM,GAAE,kBAAaD,EAAMd,IAAMgB,MAAO,CAAEC,KAAMN,GAAhD,WACE,gBACEH,UAAWC,EAAAA,EAAAA,gBACXS,IACEJ,EAAMK,YAdR,kCAcgCL,EAAMK,YAblC,2DAeJC,IAAKN,EAAMO,SAEb,cAAGb,UAAWC,EAAAA,EAAAA,iBAAd,SAAqCK,EAAMO,YCJrC,eAACC,EAAD,uDAAQ,GAAR,OAClBC,OAAOC,gBAAgB,IAAIC,WAAWH,IAAOI,QAAO,SAAC1B,EAAI2B,GAWvD,OARE3B,IAFF2B,GAAQ,IACG,GACHA,EAAKC,SAAS,IACXD,EAAO,IACTA,EAAO,IAAIC,SAAS,IAAIC,cACtBF,EAAO,GACV,IAEA,IAGT,GAAE,GAbe,CDLDG,CAAO,GADD,OAiBxB,C,oBE7BD,KAAiB,C","sources":["API/api.jsx","Pages/Home/Home.module.css","Pages/Home/Home.jsx","Pages/SearchMovie/SearchMovieItem.jsx","../node_modules/nanoid/index.browser.js","Pages/SearchMovie/SearchMovies.module.css"],"sourcesContent":["import axios from 'axios';\n\nconst BASE_URL = 'https://api.themoviedb.org/3/';\nconst API_KEY = 'ce53439883ea43717bbee26a020ebf68';\n\nexport const searchMovies = async (query, page = 1) => {\n  const response = await axios.get(\n    `${BASE_URL}search/movie?api_key=${API_KEY}&query=${query}&page=${page}`\n  );\n  return response.data;\n};\n\nexport const fetchTrendingMovies = async () => {\n  const response = await axios.get(\n    `${BASE_URL}trending/movie/day?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchCast = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}/credits?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchReviews = async movieId => {\n  const response = await axios.get(\n    `${BASE_URL}movie/${movieId}/reviews?api_key=${API_KEY}`\n  );\n  return response.data;\n};\n\nexport const fetchMoviesById = async id => {\n  const response = await axios.get(`${BASE_URL}movie/${id}?api_key=${API_KEY}`);\n  return response.data;\n};\n","// extracted by mini-css-extract-plugin\nexport default {};","import React, { useEffect, useState } from 'react';\nimport { fetchTrendingMovies } from 'API/api';\nimport css from './Home.module.css';\nimport { SearchMoviesItem } from 'Pages/SearchMovie/SearchMovieItem';\n\nexport const Home = () => {\n  const [movies, setMovies] = useState([]);\n  useEffect(() => {\n    fetchTrendingMovies().then(response => {\n      setMovies(response.results);\n    });\n  }, []);\n  return (\n    <div>\n      <h1 className={css.title}>Trending today</h1>\n      <SearchMoviesItem movies={movies} />\n    </div>\n  );\n};\n","import React from 'react';\nimport css from './SearchMovies.module.css';\nimport { nanoid } from 'nanoid';\nimport { useLocation, Link } from 'react-router-dom';\n\nconst IMG_URL = 'https://image.tmdb.org/t/p/w500';\nconst DEFAULT_URL = 'https://www.freeiconspng.com/uploads/no-image-icon-6.png';\n\nexport const SearchMoviesItem = ({ movies }) => {\n  const location = useLocation();\n  return (\n    <div className={css.container}>\n      <ul className={css.searchMoviesList}>\n        {movies.map(movie => (\n          <li key={nanoid(7)} className={css.searchMoviesItem}>\n            <Link to={`/movies/${movie.id}`} state={{ from: location }}>\n              <img\n                className={css.searchMoviesImg}\n                src={\n                  movie.poster_path ? IMG_URL + movie.poster_path : DEFAULT_URL\n                }\n                alt={movie.title}\n              />\n              <p className={css.searchMoviesText}>{movie.title}</p>\n            </Link>\n          </li>\n        ))}\n      </ul>\n    </div>\n  );\n};\n","export { urlAlphabet } from './url-alphabet/index.js'\nexport let random = bytes => crypto.getRandomValues(new Uint8Array(bytes))\nexport let customRandom = (alphabet, defaultSize, getRandom) => {\n  let mask = (2 << (Math.log(alphabet.length - 1) / Math.LN2)) - 1\n  let step = -~((1.6 * mask * defaultSize) / alphabet.length)\n  return (size = defaultSize) => {\n    let id = ''\n    while (true) {\n      let bytes = getRandom(step)\n      let j = step\n      while (j--) {\n        id += alphabet[bytes[j] & mask] || ''\n        if (id.length === size) return id\n      }\n    }\n  }\n}\nexport let customAlphabet = (alphabet, size = 21) =>\n  customRandom(alphabet, size, random)\nexport let nanoid = (size = 21) =>\n  crypto.getRandomValues(new Uint8Array(size)).reduce((id, byte) => {\n    byte &= 63\n    if (byte < 36) {\n      id += byte.toString(36)\n    } else if (byte < 62) {\n      id += (byte - 26).toString(36).toUpperCase()\n    } else if (byte > 62) {\n      id += '-'\n    } else {\n      id += '_'\n    }\n    return id\n  }, '')\n","// extracted by mini-css-extract-plugin\nexport default {};"],"names":["BASE_URL","API_KEY","searchMovies","query","page","axios","response","data","fetchTrendingMovies","fetchCast","movieId","fetchReviews","fetchMoviesById","id","Home","useState","movies","setMovies","useEffect","then","results","className","css","SearchMoviesItem","location","useLocation","map","movie","to","state","from","src","poster_path","alt","title","size","crypto","getRandomValues","Uint8Array","reduce","byte","toString","toUpperCase","nanoid"],"sourceRoot":""}